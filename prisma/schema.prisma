generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String               @id @default(cuid())
  name                      String?
  email                     String?              @unique
  emailVerified             DateTime?
  image                     String?
  role                      String
  password                  String
  accounts                  Account[]
  Appointments              Appointments[]
  clientConversations       Conversation[]       @relation("ClientConversations")
  veterinarianConversations Conversation[]       @relation("VeterinarianConversations")
  messages                  Message[]
  Pets                      Pet[]
  sessions                  Session[]
  VeterinarianProfile       VeterinarianProfile?
}

model VeterinarianProfile {
  id           String         @id @default(cuid())
  userId       String         @unique
  crmv         String         @unique
  region       String
  cep          String
  addressId    String?        @unique
  modality     String[]
  Appointments Appointments[]
  Service      Service[]
  address      Address?       @relation(fields: [addressId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
}

model Address {
  id                  String               @id @default(cuid())
  postalCode          String
  city                String
  veterinarianProfile VeterinarianProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pet {
  id          String        @id @default(cuid())
  name        String
  age         Int
  birthDate   DateTime
  notes       String
  sex         Sex
  city        String
  race        String
  userEmail   String?
  user        User?         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  vaccination Vaccination[]
}

model Appointments {
  id                    String              @id @default(cuid())
  userId                String
  veterinarianProfileId String
  petId                 String
  appointment_date      DateTime
  created_at            DateTime            @default(now())
  started_at            DateTime
  ended_at              DateTime
  clientName            String
  phone                 String
  service               String
  email                 String
  status                Appointment_status
  modality              String
  User                  User                @relation(fields: [userId], references: [id])
  veterinarian          VeterinarianProfile @relation(fields: [veterinarianProfileId], references: [id])
}

model Vaccination {
  id               String   @id @default(cuid())
  name             String
  vaccination_date DateTime
  petId            String
  pet              Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Service {
  id                    String              @id @default(cuid())
  name                  String
  price                 Float
  veterinarianProfileId String
  veterinarianProfile   VeterinarianProfile @relation(fields: [veterinarianProfileId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  started_at        DateTime
  ended_at          DateTime
  clientIdEmail     String
  veterinarianEmail String
  client            User      @relation("ClientConversations", fields: [clientIdEmail], references: [email])
  veterinarian      User      @relation("VeterinarianConversations", fields: [veterinarianEmail], references: [email])
  messages          Message[]
}

model Message {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  text             String
  conversationId   String
  authorEmail      String
  author           User         @relation(fields: [authorEmail], references: [email])
  chatConversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

enum Role {
  normal
  veterinarian
}

enum Sex {
  M
  F
  U
}

enum Appointment_status {
  pending
  confirmed
  denied
  canceled
  finished
}
