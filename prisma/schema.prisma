// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  role                String
  password            String
  accounts            Account[]
  sessions            Session[]
  Pets                Pet[]
  VeterinarianProfile VeterinarianProfile?
  Appointments        Appointments[]
}

model VeterinarianProfile {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id])
  crmv         String         @unique
  region       String
  cep          String
  addressId    String?        @unique
  address      Address?       @relation(fields: [addressId], references: [id])
  Appointments Appointments[]
}

model Address {
  id                  String               @id @default(cuid())
  postalCode          String
  city                String
  veterinarianProfile VeterinarianProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pet {
  id          String   @id @default(cuid())
  name        String
  age         Int
  user        User?    @relation(fields: [userEmail], references: [email])
  birthDate   DateTime
  notes       String
  vaccination String
  sex         Sex
  city        String
  race        String
  userEmail   String?
}

enum Sex {
  M
  H
}

model Appointments {
  id                    String              @id @default(cuid())
  User                  User                @relation(fields: [userId], references: [id])
  userId                String
  veterinarian          VeterinarianProfile @relation(fields: [veterinarianProfileId], references: [id])
  veterinarianProfileId String
  petId                 String
  appointment_date      DateTime
  created_at            DateTime            @default(now())
  clientName            String
  phone                 String
  service               String
  email                 String
}
